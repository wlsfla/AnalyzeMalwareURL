from sqlalchemy import create_engine
from nslookup import Nslookup
import re
import pandas as pd


class DBSession:
    def __init__(self):
        self.dbconn = self.__getmysqlconn()

    def __getmysqlconn(self):
        DB_USER = 'root'
        DB_PW = '1q2w3e4r!'
        DB_ADDR = 'localhost:3306'
        DB_NAME = 'Malurl'
        DB_CHARSET = 'utf8mb4'
        db_connection_str = f'mysql+pymysql://{DB_USER}:{DB_PW}@{DB_ADDR}/{DB_NAME}?charset={DB_CHARSET}'
        conn = create_engine(db_connection_str)
        return conn


class Util:
    def __init__(self):
        self.regexpipPattern = self.__getipregexppattern()
        self.GOOGLE_DNS_IP = "8.8.8.8"

    def __getipregexppattern(self):
        return re.compile(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")

    def getDomainIPaddr(self, domainURL) -> list:
        '''

        :param domainURL: domain string.(ex. www.naver.com)
        :return: list.
        '''
        result = ','.join(
            map(str, Nslookup(dns_servers=[self.GOOGLE_DNS_IP], verbose=False, tcp=False).dns_lookup(domainURL).answer))
        print(result)
        return result


class DBobj(DBSession):
    def __init__(self):
        super().__init__()
        # self.dbconn = super().dbconn
        self.df_malurl = self.__getmalurltbl()
        self.df_payload = self.__getmalurlpayloadstbl()

    def __getmalurltbl(self):
        return pd.read_sql('select * from Malurl.malurl', self.dbconn)

    def __getmalurlpayloadstbl(self):
        return pd.read_sql('select * from Malurl.malurl_payload', self.dbconn)


